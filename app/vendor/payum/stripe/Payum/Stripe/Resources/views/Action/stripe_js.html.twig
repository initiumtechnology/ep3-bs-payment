{% extends layout ?: "@PayumCore/layout.html.twig" %}

{% block payum_stylesheets %}
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <link type="text/css" rel="stylesheet" href="{{ model.metadata.instance }}/css-client/stripe_2.1.min.css">
{% endblock %}

{% block payum_body %}
    {{ parent() }}

<main id="main" class="checkout">
    <header class="header">
      <img src="{{ model.metadata.instance }}/imgs-client/layout/logo.png" id="logo" />
      <a class="shop abort" href="{{ model.metadata.instance }}/square/booking/cancellation?bid={{ model.metadata.bid }}&confirmed=true">{{ model.metadata.locale == 'de-DE' ? 'Abbruch und zurück zu' : 'abort and back to' }} {{ model.metadata.projectShort }} Bookingsystem</a>
    </header>
    <div id="checkout">
      <div>
          <b>{{ model.description|default("") }}</b>
      </div>
      <div id="payment-request">
        <div id="payment-request-button">Pay Button</div>
      </div>
      <div id="alternative"></div>
<form action="{{ actionUrl|default('') }}" method="post" id="payment-form">
     
        <p class="instruction">{{ model.metadata.locale == 'de-DE' ? 'Zahlungsinformationen eingeben' : 'Complete your payment details below' }}</p>
        <section>
          <h2>{{ model.metadata.locale == 'de-DE' ? 'Zahlungsinformation' : 'Payment information' }}</h2>
          <fieldset class="with-state">
            <label>
              <span>Name</span>
              <input name="name" class="field" placeholder="Jimmy Foo" required value="{{ model.metadata.userName|default("") }}">
            </label>
            <label>
              <span>Email</span>
              <input name="email" type="email" class="field" placeholder="jimmy@example.com" required value="{{ model.receipt_email|default("") }}">
            </label>
          </fieldset>
        </section>
        <div id="payment-errors" class="element-errors"></div>
        <section>
          <nav id="payment-methods" class="visible">
             <ul> 
              {% if 'card' in model.payment_method_types %}
              <li class="visible">
                <input type="radio" name="payment" id="payment-card" value="card" checked>
                <label for="payment-card">{{ model.metadata.locale == 'de-DE' ? 'Kreditkarte' : 'Card' }}</label>
              </li>
              {% endif %}
              {% if 'sepa_debit' in model.payment_method_types %} 
              <li class="visible">
                <input type="radio" name="payment" id="payment-sepa_debit" value="sepa_debit">
                <label for="payment-sepa_debit">{{ model.metadata.locale == 'de-DE' ? 'Lastschrift' : 'SEPA Direct Debit' }}</label>
              </li>
              {% endif %}
              {% if 'ideal' in model.payment_method_types %}
              <li class="visible">
                <input type="radio" name="payment" id="payment-ideal" value="ideal">
                <label for="payment-ideal">iDEAL</label>
              </li>
              {% endif %}
              {% if 'giropay' in model.payment_method_types %}
              <li class="visible">
                <input type="radio" name="payment" id="payment-giropay" value="giropay">
                <label for="payment-giropay">GIROPAY</label>
              </li>
              {% endif %}
              {% if 'sofort' in model.payment_method_types %}
              <li class="visible">
                <input type="radio" name="payment" id="payment-sofort" value="sofort">
                <label for="payment-sofort">SOFORT</label>
              </li>
              {% endif %}
             </ul> 
          </nav>
        <div class="payment-info card visible">
            <fieldset>
              <label>
                <span>{{ model.metadata.locale == 'de-DE' ? 'Kreditkarte' : 'Card' }}</span>
                <div id="card-element" class="field"></div>
              </label>
            </fieldset>
        </div>
        <div class="payment-info sepa_debit">
            <fieldset>
              <label>
                <span>IBAN</span>
                <div id="iban-element" class="field"></div>
              </label>
            </fieldset>
            <p class="notice">{{ model.metadata.locale != 'de-DE' ? 'By providing your IBAN and confirming this payment, you authorise (A) ' : 'Ich ermächtige/ Wir ermächtigen (A) ' }} {{ model.metadata.companyName }} {{ model.metadata.locale != 'de-DE' ? ' and Stripe Inc., our payment provider, to send instructions to your bank to debit your account and (B) your bank to debit your account in accordance with the instructions from' : ' und Stripe Inc., unseren Zahlungs Dienstleister, Zahlungen von meinem/ unserem Konto mittels Lastschrift einzuziehen. Zugleich (B) weise ich mein/ weisen wir unser Kreditinstitut an, die von ' }} {{ model.metadata.companyName }} {{ model.metadata.locale != 'de-DE' ? ' and Stripe Inc..' : ' und Stripe Inc. auf mein/ unser Konto gezogenen Lastschriften einzulösen.' }}</p>  
        </div>
        <div class="payment-info ideal">
           <fieldset>
             <label>
               <span>iDEAL</span>
               <div id="ideal-bank-element" class="field"></div>
             </label>
           </fieldset>
        </div>
        <div class="payment-info redirect">
            <p class="notice">{{ model.metadata.locale == 'de-DE' ? 'Sie werden zu ihrem Zahlungsdienstleister weitergeleitet' : 'You’ll be redirected to the banking site to complete your payment.' }}</p>
        </div>
 
        </section>

  <button type="submit">{{ model.metadata.locale != 'de-DE' ? 'Pay' : '' }} A${{ model.amount/100 }} {{ model.metadata.locale == 'de-DE' ? 'zahlen' : '' }}</button>

</form> 


  </div>
</main>
  <aside id="summary">
    <div class="header">
      <h1>{{ model.metadata.locale == 'de-DE' ? 'Übersicht' : 'Overview' }}</h1>
    </div>
    <div id="order-items">
    <div class="line-item">
        <img class="image" src="{{ model.metadata.instance }}/imgs-client/layout/tennis-court.png" alt="square" id="logo">
        <div class="label">
          <p class="product">{{ model.metadata.productName }}</p>
          <p class="sku"></p>
        </div>
        <p class="count">{{ model.quantity|default(1) }}</p>
        <p class="price">A${{ model.amount/100 }}</p>
        </div>
    </div>
    <div id="order-total">
      <div class="line-item total">
        <p class="label">Total</p>
        <p class="price" data-total>A${{ model.amount/100 }}</p>
      </div>

    </div>
  </aside>

{% endblock %}

{% block payum_vendor_javascripts %}
    {{ parent() }}


    <!-- The required Stripe lib -->
    <script type="text/javascript" src="https://js.stripe.com/v3/"></script>

    <!-- jQuery is used only for this example; it isn't required to use Stripe -->
    <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>

    <script type="text/javascript">

    // Create references to the main form and its submit button.
    const form = document.getElementById('payment-form');
    const submitButton = form.querySelector('button[type=submit]');

    // List of relevant countries for the payment methods supported in this demo.
    // Read the Stripe guide: https://stripe.com/payments/payment-methods-guide
    const paymentMethods = {
      bancontact: {
        name: 'Bancontact',
        flow: 'redirect',
        countries: ['BE'],
        currencies: ['eur'],
      },
      card: {
        name: 'Card',
        flow: 'none',
      },
      eps: {
        name: 'EPS',
        flow: 'redirect',
        countries: ['AT'],
        currencies: ['eur'],
      },
      ideal: {
        name: 'iDEAL',
        flow: 'redirect',
        countries: ['NL'],
        currencies: ['eur'],
      },
      giropay: {
        name: 'Giropay',
        flow: 'redirect',
        countries: ['DE'],
        currencies: ['eur'],
      },
      sepa_debit: {
        name: 'SEPA Direct Debit',
        flow: 'none',
        countries: [
          'FR',
          'DE',
          'ES',
          'BE',
          'NL',
          'LU',
          'IT',
          'PT',
          'AT',
          'IE',
          'FI',
        ],
        currencies: ['eur'],
      },
      sofort: {
        name: 'SOFORT',
        flow: 'redirect',
        countries: ['DE', 'AT', 'NL'],
        currencies: ['eur'],
      },
    };

    var stripe = Stripe({{ publishable_key|json_encode|raw }}, {betas: ['sofort_pm_beta_1']});
    var elements = stripe.elements();

    // Prepare the styles for Elements.
    var style = {
    base: {
      iconColor: '#54595f',
      color: '#404054',
      fontWeight: 400,
      fontFamily:
        '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif',
      fontSmoothing: 'antialiased',
      fontSize: '15px',
      '::placeholder': {
        color: '#adadad',
      },
      ':-webkit-autofill': {
        color: '#54595f',
      },
    },
    }; 

    const cardOptions = {
      style,
      hidePostalCode: true
    }

    // Create an instance of the card Element.
    var card = elements.create('card', cardOptions);

    // Add an instance of the card Element into the `card-element` <div>.
    card.mount('#card-element');

    // Monitor change events on the Card Element to display any errors.
    card.on('change', ({error}) => {
      const cardErrors = document.getElementById('payment-errors');
      if (error) {
        cardErrors.textContent = error.message;
        cardErrors.classList.add('visible');
      } else {
        cardErrors.classList.remove('visible');
      }
      // Re-enable the Pay button.
      submitButton.disabled = false;
    });

    // Create a IBAN Element and pass the right options for styles and supported countries.
    const ibanOptions = {
      style,
      supportedCountries: ['SEPA']
    };
    const iban = elements.create('iban', ibanOptions);
 
    // Mount the IBAN Element on the page.
    iban.mount('#iban-element');

    // Monitor change events on the IBAN Element to display any errors.
    iban.on('change', ({error, bankName}) => {
      const ibanErrors = document.getElementById('payment-errors');
      if (error) {
        ibanErrors.textContent = error.message;
        ibanErrors.classList.add('visible');
      } else {
        ibanErrors.classList.remove('visible');
        if (bankName) {
          updateButtonLabel('sepa_debit', bankName);
        }
      }
      // Re-enable the Pay button.
      submitButton.disabled = false;
    });

    // Create a iDEAL Bank Element and pass the style options, along with an extra `padding` property.
    const idealBank = elements.create('idealBank', {
      style: {base: Object.assign({padding: '10px 15px'}, style.base)},
    });

    // Mount the iDEAL Bank Element on the page.
    idealBank.mount('#ideal-bank-element');

    // Monitor change events on the iDEAL Element to display any errors.
    idealBank.on('change', function(event) {
       var bankName = event.value;
       if (bankName) {
          updateButtonLabel('ideal', bankName);
       }
    });

    // Update the main button to reflect the payment method being selected.
    const updateButtonLabel = (paymentMethod, bankName) => {
      let name = paymentMethods[paymentMethod].name;
      let amount = 'A${{ model.amount/100 }}';
      let l_pay1 = '{{ model.metadata.locale != 'de-DE' ? 'Pay ' : '' }}';
      let l_pay2 = '{{ model.metadata.locale == 'de-DE' ? ' zahlen' : '' }}';
      let l_with = '{{ model.metadata.locale != 'de-DE' ? ' with ' : ' mit ' }}';
      let l_from = '{{ model.metadata.locale != 'de-DE' ? ' from ' : ' von ' }}';
      let label = l_pay1 + `${amount}` + l_pay2;
      if (paymentMethod === 'card') {
        let name = '{{ model.metadata.locale == 'de-DE' ? 'Kreditkarte' : 'Creditcard' }}';
        label = l_pay1 + `${amount}` + l_with + `${name}` + l_pay2;
      }
      if (paymentMethod === 'sepa_debit') {
        let name = '{{ model.metadata.locale == 'de-DE' ? 'SEPA Lastschrift' : 'SEPA Direct Debit' }}'; 
        label = l_pay1 + `${amount}` + l_with + `${name}` + l_pay2;
      }
      if (paymentMethod === 'ideal') {
        let name = 'iDEAL';
        label = l_pay1 + `${amount}` + l_with + `${name}` + l_pay2;
      }
      if (paymentMethod === 'giropay') {
        let name = 'Giropay';
        label = l_pay1 + `${amount}` + l_with + `${name}` + l_pay2;
      }
      if (paymentMethod === 'sofort') {
        let name = 'Sofort';
        label = l_pay1 + `${amount}` + l_with + `${name}` + l_pay2;
      }
      if (paymentMethod === 'sepa_debit' && bankName) {
        let name = '{{ model.metadata.locale == 'de-DE' ? 'SEPA Lastschrift' : 'SEPA Direct Debit' }}';
        let l_pay1 = '{{ model.metadata.locale != 'de-DE' ? 'Debit ' : '' }}';
        let l_pay2 = '{{ model.metadata.locale == 'de-DE' ? ' einziehen' : '' }}';
        label = l_pay1 + `${amount}` + l_from + `${bankName}` + l_pay2;
      }
      if (paymentMethod === 'ideal' && bankName) {
        let name = 'iDEAL';
        label = l_pay1 + `${amount}` + l_with + `${bankName}` + l_pay2;
      }
      submitButton.innerText = label;
    };

    // Listen to changes to the payment method selector.
    for (let input of document.querySelectorAll('input[name=payment]')) {
      input.addEventListener('change', event => {
        event.preventDefault();
        const payment = form.querySelector('input[name=payment]:checked').value;
        const flow = paymentMethods[payment].flow;
        const paymentErrors = document.getElementById('payment-errors'); 
 
        // Update button label.
        updateButtonLabel(event.target.value);
  
        // Show the relevant details, whether it's an extra element or extra information for the user.
        form
          .querySelector('.payment-info.card')
          .classList.toggle('visible', payment === 'card');
        form
          .querySelector('.payment-info.sepa_debit')
          .classList.toggle('visible', payment === 'sepa_debit');
        form
          .querySelector('.payment-info.ideal')
          .classList.toggle('visible', payment === 'ideal');
        form
          .querySelector('.payment-info.redirect')
          .classList.toggle('visible', flow === 'redirect');
        paymentErrors.textContent = "";
        paymentErrors.classList.remove('visible');
        submitButton.disabled = false;
      });
    }

    if ('{{ model.metadata.stripePaymentRequest }}' == 'true') {
    // Create the payment request.
    var paymentRequest = stripe.paymentRequest({
          country: 'DE',
          currency: 'eur',
          total: {
            label: '{{ model.description|default("Tennis Booking") }}',
            amount: {{ model.amount }}
          },
          requestShipping: false,
          requestPayerEmail: true
    });

    var paymentRequestButton = elements.create('paymentRequestButton', {
      paymentRequest: paymentRequest,
      style: {
        paymentRequestButton: {
          type: 'default',
          // One of 'default', 'book', 'buy', or 'donate'
          // Defaults to 'default'
    
          theme: 'dark',
          // One of 'dark', 'light', or 'light-outline'
          // Defaults to 'dark'
    
          height: '40px'
          // Defaults to '40px'. The width is always '100%'.
        },
        },
    });

    // Check the availability of the Payment Request API first.
    paymentRequest.canMakePayment().then(function(result) {
      if (result) {
        paymentRequestButton.mount('#payment-request-button');
        // Replace the instruction.
        document.getElementById('alternative').innerHTML += '<b>{{ model.metadata.locale == 'de-DE' ? 'oder ' : 'or ' }}</b>';
        // Show the payment request section.
        document.getElementById('payment-request').classList.add('visible');
      } else {
        document.getElementById('payment-request-button').style.display = 'none';
      }
    });

    jQuery(function($) {
      paymentRequest.on('paymentmethod', function(ev) {
        // Send paymentMethod to server
        var token = ev.paymentMethod.id;
      
        var $form = $('#payment-form');
 
        // Insert the token into the form so it gets submitted to the server
        $form.append($('<input type="hidden" name="stripeToken" />').val(token));
        // and submit
        $form.get(0).submit();
      });
    });
    }    

    // default payment-method
    form.querySelector('input[id=payment-{{ model.metadata.stripeDefaultPaymentMethod }}').click();

</script>  

 
{% endblock %}

{% block payum_javascripts %}
    {{ parent() }}

    <script type="text/javascript">

        jQuery(function($) {
            $('#payment-form').submit(function(e) {
                var $form = $(this);
                const form = document.getElementById('payment-form');                
                const payment = form.querySelector('input[name=payment]:checked').value;
                const name = form.querySelector('input[name=name]').value;
                const email = form.querySelector('input[name=email]').value;
                const billing_details = { name, email };
                const paymentParams = { billing_details };
                const sofort = { country: "DE" };
                const sofortParams = { sofort };               
 
                // Disable the submit button to prevent repeated clicks
                $form.find('button').prop('disabled', true);
                $form.find('button').css('background', '#dadadf');
                // card
                if (payment === 'card') {
                    stripe.createPaymentMethod('card', card, paymentParams).then(stripeResponseHandler);
                }
                // sepa-debit
                if (payment === 'sepa_debit') {
                    stripe.createPaymentMethod('sepa_debit', iban, paymentParams).then(stripeResponseHandler);               
                }
                // ideal
                if (payment === 'ideal') {
                    stripe.createPaymentMethod('ideal', idealBank, paymentParams).then(stripeResponseHandler);
                }
                // giropay
                if (payment === 'giropay') {
                    stripe.createPaymentMethod('giropay', paymentParams).then(stripeResponseHandler);
                }
                // sofort
                if (payment === 'sofort') {
                    stripe.createPaymentMethod('sofort', sofortParams, paymentParams).then(stripeResponseHandler);
                }

                // Prevent the form from submitting with the default action
                return false;
            });

            var stripeResponseHandler = function(response) {
                var $form = $('#payment-form');
                const paymentErrors = document.getElementById('payment-errors');
                const payment = form.querySelector('input[name=payment]:checked').value;
                if (response.error) {
                    // Show the errors on the form
                    $form.find('#payment-errors').text(response.error.message
                        + " ");
                    paymentErrors.classList.add('visible');
                    $form.find('button').prop('disabled', false);
                    $form.find('button').css('background', '#54595f');

                } else {
                    // token is the created payment method's id
                    var token = response.paymentMethod.id;
                    // Insert the token into the form so it gets submitted to the server
                    $form.append($('<input type="hidden" name="stripeToken" />').val(token));
                    $form.append($('<input type="hidden" name="stripePaymentMethod" />').val(payment));
                    // and re-submit
                    $form.get(0).submit();
                }
            };
        });

    </script>

{% endblock %}
